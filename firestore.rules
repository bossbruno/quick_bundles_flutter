rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc != null && userDoc.data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Prevent user deletion
    }

    // Transactions collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }

    // Bundles collection
    match /bundles/{bundleId} {
      allow read: if isAuthenticated(); // All users can view bundles
      allow write: if false; // Only admin can modify bundles
    }

    // Listings collection
    match /listings/{listingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.vendorId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.vendorId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.vendorId == request.auth.uid;
    }

    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        resource.data.vendorId == request.auth.uid || resource.data.buyerId == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.vendorId == request.auth.uid || resource.data.buyerId == request.auth.uid
      );
      // Allow either party (vendor or buyer) to delete the chat document
      allow delete: if isAuthenticated() && (
        resource.data.vendorId == request.auth.uid || resource.data.buyerId == request.auth.uid
      );

      // Messages subcollection under chats
      match /messages/{messageId} {
        allow read, create, update: if isAuthenticated() && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.vendorId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.buyerId == request.auth.uid
        );
        // Allow either party to delete a message in their chat
        allow delete: if isAuthenticated() && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.vendorId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.buyerId == request.auth.uid
        );
      }
    }

    // Reports collection - users can create reports, admins can read/update all
    match /reports/{reportId} {
      allow create: if isAuthenticated();
      allow read, update: if isAuthenticated() && (
        // Users can read their own reports
        resource.data.reporterId == request.auth.uid ||
        // Admins can read all reports
        isAdmin()
      );
      allow delete: if false;
    }

    // Deletion requests collection - users can create, admins can read/update all
    match /deletionRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow read, update: if isAuthenticated() && (
        // Users can read their own deletion requests
        resource.data.uid == request.auth.uid ||
        // Admins can read all deletion requests
        isAdmin()
      );
      allow delete: if false;
    }
  }
} 